# -*- coding: utf-8 -*-
"""-numpyassign-2-ipynb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/khondamir-makhmudov/139490aea2a72794dbc7729a6a60f38a/-numpyassign-2-ipynb.ipynb

# **DATA SCIENCE AND ARTIFICIAL INTELLIGENCE PRACTICE**

## Data analysis. Numpy library.

# **PRACTICAL TASK 2**

## Dealing with n-dimensional arrays
"""

# Call the numpy library
import numpy as np

"""### Problem(1): Creating a 2-dimensional array

**Problem Condition :** Continue a function that creates an array of size (3, 3) with elements from 0 to 9 (9 itself is not an array element) and a step of 1.

"""

def nd_array():
  arr=np.arange(9).reshape(3,3)
  return arr

"""### Problem(2): Cutting elements from 2-dimensional arrays by index
**Problem :** Continue the function to cut the part of the array created above whose elements are equal to 6 and 7.
"""

def sliced_array_2d():
    arr1=nd_array()
    result=arr1[2,:2]
    return result

"""### Problem(3): Cutting elements from a 3-dimensional array by index

**Problem :** Create a 3-dimensional array from the following list, and continue a function that intersects elements 12, 13, 15, and 16.  

                  [[[ 0,  1,  2],
                    [ 3,  4,  5],
                    [ 6,  7,  8]],

                   [[ 9, 10, 11],
                    [12, 13, 14],
                    [15, 16, 17]],

                   [[18, 19, 20],
                    [21, 22, 23],
                    [24, 25, 26]]]

"""

def sliced_array_3d():
   arr3=np.arange(27).reshape(3,3,3)
   result=arr3[1][1:,:2]
   return result

"""___

### Problem(4): Cutting elements from 2-dimensional arrays using Boolean index

**Problem:** We have names,
        
        ['Hasan', 'Husan', 'Javohir', 'Elyor', 'Hasan', 'Javohir', 'Elyor']

People on **list** and their **information**
       
      [[5, 6, 1, 1],
       [9, 1, 1, 1],
       [7, 7, 4, 2],
       [1, 5, 1, 9],
       [9, 9, 4, 5],
       [7, 5, 9, 6],
       [5, 3, 7, 4]]
presented in the form.


From this data, continue the function of extracting the data related to the names **Javahir** and **Elyor** using Boolean indexing.
"""

# JAVOBNI SHU YERGA YOZING
def boolean_slicing():
   names=np.array(['Hasan', 'Husan', 'Javohir', 'Elyor', 'Hasan', 'Javohir', 'Elyor'])
   data=np.array([[5, 6, 1, 1],
                  [9, 1, 1, 1],
                  [7, 7, 4, 2],
                  [1, 5, 1, 9],
                  [9, 9, 4, 5],
                  [7, 5, 9, 6],
                  [5, 3, 7, 4]])
   mask=(names=='Javohir')|(names=='Elyor')
   result=data[mask]
   return result